# UniswapPair represents the information about single
# Uniswap pair managed by the Uniswap Core.
type UniswapPair {
    # pairAddress represents the Address of the Pair
    # and also the address of the ERC20 token
    # managing the share of each liquidity participant.
    pairAddress: Address!

    # tokens represent the list of tokens in the pair.
    # The array always contain two tokens, their order
    # is irrelevant from the Uniswap perspective, but
    # we always return them in the same order.
    tokens: [ERC20Token!]!

    # reserves of the tokens of the pair.
    # The reserve index inside the array corresponds
    # with the token position.
    reserves: [BigInt!]!

    # The timestamp of the block
    # in which this reserves state was reached.
    reservesTimeStamp: Long!

    # cumulative prices of the tokens of the pair.
    # The price index inside the array corresponds
    # with the token position.
    cumulativePrices: [BigInt!]!

    # lastKValue represents the last coefficient
    # of reserves multiplied. It's the value Uniswap protocol
    # uses to control reserves growth on both sides of the pool.
    lastKValue: BigInt!

    # totalSupply represents the total amount
    # of the pair tokens in circulation and represents
    # the total share pool of all the participants.
    totalSupply: BigInt!

    # share represents the share of the given user/participant on the pair.
    # To get the share percentage, divide this value by the total supply
    # of the pair.
    shareOf(user: Address!): BigInt!
}


# DefiUniswapVolume represents a calculated volume for swap pairs in history
type DefiUniswapVolume {

    # UniswapPair represents the information about single
    # Uniswap pair managed by the Uniswap Core.
    uniswapPair: UniswapPair!

    # pairAddress represents the Address of the Pair
    pairAddress: Address!

    # dailyVolume returns swap volume for last 24 hours
    dailyVolume: BigInt!

    # weeklyVolume returns swap volume for last 7 days
    weeklyVolume: BigInt!

    # monthlyVolume returns swap volume for last month
    monthlyVolume: BigInt!

    # YearlyVolume returns swap volume for last year
    yearlyVolume: BigInt!

    # IsInFUSD indicates if TokenA from the pair has a price value to be able
    # to calculate value in fUSD
    isInFUSD: Boolean!

}

# DefiSwaps represents swap volume for given pair and time interval
type DefiTimeVolume {

    # pairAddress represents the Address of the Pair
    pairAddress: Address!

    # time indicates a period for this volume
    time: String!

    # value represents amount of the volume
    value: BigInt!
}

# DefiTimePrice represents a calculated price for swap pairs in history
type DefiTimePrice {

	# pairAddress represents the Address of the Pair
    pairAddress: Address!

    # time indicates a period for this price
    time: String!

    # opening price for this time period
    open: Float!

    # closing price for this time period
	close: Float!

    # lowest price for this time period
	low: Float!

    # highest price for this time period
	high: Float!

    # average price for this time period
    average: Float!
}

# DefiTimeReserve represents a Uniswap pair reserve in history
type DefiTimeReserve {

    # UniswapPair represents the information about single
    # Uniswap pair managed by the Uniswap Core.
    uniswapPair: UniswapPair!

    # Time represents UTC ISO time tag for this reserve values
    time: String!

    # ReserveClose is close reserve for this time period
	# for both tokens. Index inside the array corresponds
    # with the token position.
    reserveClose: [BigInt!]!
}